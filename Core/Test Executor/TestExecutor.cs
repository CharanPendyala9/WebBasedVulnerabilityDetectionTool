using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using ScriptInjectionAndDetectionTool.Core.ModelClasses;
using ScriptInjectionAndDetectionTool.Core.TestScriptsExtractor;
using System.Windows.Forms;
using ScriptInjectionAndDetectionTool.SiteVulnerabilityRecorder;

namespace ScriptInjectionAndDetectionTool.Core.Test_Executor
{
    public class TestExecutor
    {
        public string Url;
        public IWebDriver driver;
        public TestData data;

        public List<Test> TestCases = new List<Test>();
        public int VulnerabilityCount = 0;

        public TestExecutor(string url, Selector InputSelector, Selector SubmitSlector)
        {
            //Extracts Test Scripts from the defined file
            List<string> scripts;
            var ext = new ExcelExtractor();
            scripts = ext.GetScripts();

            Url = url;

            //Establish web driver - Chrome webdriver context is established
            Context.ChromeDriverContext Context = new Context.ChromeDriverContext();

            IWebDriver Driver = Context.EstablishContextWebDriver(url);

            WebPage TargetPage = new WebPage(Driver);

            VulnerabilityRecord Record = new VulnerabilityRecord();

            //Prepare test cases for execution
            foreach (var t in scripts.Select(script => new Test { Script = script }))
            {
                TestCases.Add(t);
            }

            //Execution
            foreach (var t in TestCases)
            {
                try
                {
                    TargetPage.InjectScript(InputSelector, t.Script);
                    TargetPage.SubmitScript(SubmitSlector);

                    //**pending**//
                    //Analyze post submit behaviour of page
                    //25% probability implemented to make the test pass with out actual vulnerability check
                    Random random = new Random();
                    if (random.Next(1, 101) <= 75)
                    {
                        t.Pass = false;

                        Record.URL = Url;
                        Record.InputSelector = InputSelector;
                        Record.SubmitSelector = SubmitSlector;

                        VulnerabilityCount++;
                    }
                }

                catch(Exception ex)
                {
                    if (ex is InvalidOperationException && ex.ToString().Contains("This is not the specified Page"))
                    {
                        MessageBox.Show("Test failed with \n" + t.Script+"\n Redirected to unexpected page");
                        t.Pass = false;
                        Record.URL = Url;
                        Record.InputSelector = InputSelector;
                        Record.SubmitSelector = SubmitSlector;

                        VulnerabilityCount++;
                    }
                }
            }

            if(VulnerabilityCount>0)
            {
                LogVulnerability(Record);
            }

            Context.Cleanup();
        }

        //Export the vulnerability to cloud. To be able to communicate with Add on or Extension
        public void LogVulnerability(VulnerabilityRecord Record)
        {
            SiteNegativeResultExporter Exporter = new SiteNegativeResultExporter();
            Exporter.RecordVulnerability(Record);
        }
    }
}
