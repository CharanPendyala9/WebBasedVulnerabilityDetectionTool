using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ScriptInjectionAndDetectionTool.Core.TestScriptsExtractor;
using Excel = Microsoft.Office.Interop.Excel;
using System.Configuration;

namespace ScriptInjectionAndDetectionTool.Core.TestScriptsExtractor
{
    public class ExcelExtractor : TestScriptExtractor
    {
        public List<string> GetScripts()
        {
            ExtractedTestData = new Test_Executor.TestData();
            ExtractedTestData.Scripts = new List<string>();

            Excel.Application xlApp;
            Excel.Workbook WorkBook;
            Excel.Worksheet WorkSheet;
            Excel.Range range;

            xlApp = new Excel.Application();
            WorkBook = xlApp.Workbooks.Open(GetFilePath(), 0, true, 5, "", "", true, Microsoft.Office.Interop.Excel.XlPlatform.xlWindows, "\t", false, false, 0, true, 1, 0);
            WorkSheet = (Excel.Worksheet)WorkBook.Worksheets.get_Item(1);

            range = WorkSheet.UsedRange;

            for (int i = 2; i <= range.Rows.Count; i++)
            {
                string script = WorkSheet.Cells[i,"A"].Value2;

                if (script != "")
                    ExtractedTestData.Scripts.Add(script);
                else
                    i++;
            }

            return ExtractedTestData.Scripts;
        }

        public string GetFilePath()
        {
            return GetSetting("ScriptInjection.TestScriptsPath");
        }

        /// <summary>
        /// Gets the setting my the <paramref name="name"/>.
        /// </summary>
        /// <param name="name">The name of the setting.</param>
        /// <returns>The setting my the <paramref name="name"/>.</returns>
        private static string GetSetting(string name)
        {
            if (name == null)
                throw new ArgumentNullException("name");

            return ConfigurationManager.AppSettings[name];
        }
    }
}
